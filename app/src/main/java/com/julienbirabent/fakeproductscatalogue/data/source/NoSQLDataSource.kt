package com.julienbirabent.fakeproductscatalogue.data.source

import com.julienbirabent.fakeproductscatalogue.data.entity.Model
import com.julienbirabent.fakeproductscatalogue.data.entity.UniqueModel
import io.reactivex.Observable
import io.reactivex.Single

/**
 * Interface that abstract the basic functions of a NOSql Database
 */
interface NoSQLDataSource {

    /**
     * Add a new value to the database also known as a document.
     * @param collectionPath : the path of the collection in which we want to add the specified object
     * @param model : a plain data object model (POJO for java lovers) that will be saved as a new
     * document with a unique id generated by the database.
     */
    fun <T : Model> addNewValue(collectionPath: String, model: T): Single<T>

    fun <T : Model> getCollection(collectionPath: String, modelClass: Class<T>): Observable<List<T>>

    fun <T : Model> getDocument(
        collectionPath: String,
        documentPath: String,
        modelClass: Class<T>
    ): Observable<T>

    /**
     * Replace the key/pair values matching the model properties in the given collection for the specified document.
     * If the document doesn't exist, a new one is created with a new unique id generated by the database.
     * @param collectionPath : the path of the collection in which we want to set the specified object
     * @param documentPath : an id provided by the client side, and not from the database
     *
     */
    fun <T : Model> setValue(collectionPath: String, documentPath: String, model: T): Single<T>

    /**
     * Replace the key/pair values matching the model properties in the given collection for the specified document.
     * If the document doesn't exist, a new one is created with a new unique id generated by the database.
     */
    fun <T : UniqueModel> setValue(collectionPath: String, model: T): Single<T>

    fun <T : Model> deleteDocument(
        collectionPath: String,
        documentPath: String,
        model: T
    ): Single<T>
}