package com.julienbirabent.fakeproductscatalogue.data.source.firestore

import com.google.firebase.firestore.FirebaseFirestore
import com.julienbirabent.fakeproductscatalogue.app.ThisApplication
import com.julienbirabent.fakeproductscatalogue.data.entity.FireStoreAutoGeneratedIdModel
import com.julienbirabent.fakeproductscatalogue.data.entity.Model
import com.julienbirabent.fakeproductscatalogue.data.entity.UniqueModel
import com.julienbirabent.fakeproductscatalogue.data.source.NoSQLDataSource
import io.reactivex.Observable
import io.reactivex.Single
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class FireStoreDataSource : NoSQLDataSource {

    val database: FirebaseFirestore = Injector().database

    class Injector {
        @Inject
        lateinit var database: FirebaseFirestore

        init {
            ThisApplication.applicationComponent()?.inject(this)
        }
    }

    override fun <T : Model> setValue(
        collectionPath: String,
        documentPath: String,
        model: T
    ): Single<T> {
        return setDocument(collectionPath, documentPath, model)
    }

    override fun <T : UniqueModel> setValue(collectionPath: String, model: T): Single<T> {
        return setDocument(collectionPath, model)
    }

    /**
     * Here we cast [model] to [FireStoreAutoGeneratedIdModel] so the FireStore API process the
     * @DocumentId annotation in the model. By doing this, the management of the auto generated id
     * is transparent for the client app.
     */


    override fun <T : Model> deleteDocument(
        collectionPath: String,
        documentPath: String,
        model: T
    ): Single<T> {
        return deleteDocumentExt(collectionPath, documentPath, model)
    }

    override fun <T : Model> addNewValue(collectionPath: String, model: T): Single<T> {
        return addNewDocument(collectionPath, model)
    }

    override fun <T : Model> getCollection(
        collectionPath: String,
        modelClass: Class<T>
    ): Observable<List<T>> {
        return getFireStoreCollection(collectionPath, modelClass)
    }

    override fun <T : Model> getDocument(
        collectionPath: String,
        documentPath: String,
        modelClass: Class<T>
    ): Observable<T> {
        return getFireStoreDocument(collectionPath, documentPath, modelClass)
    }
}